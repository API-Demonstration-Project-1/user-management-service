/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toystore.ecomm.users.controllers;

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.toystore.ecomm.users.model.Error;
import com.toystore.ecomm.users.model.User;
import com.toystore.ecomm.users.model.Usersresponse;
import com.toystore.ecomm.users.services.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.io.IOException;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-04T22:49:45.638Z")

@Api(value = "users", description = "the users API")
@RequestMapping(value = "")
public interface UsersApi {
	
    @ApiOperation(value = "UsersByUserId_DELETE", nickname = "usersByUserIdDELETE", notes = "Delete a User by userId", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Usersresponse> usersByUserIdDELETE(@ApiParam(value ="",required=true) @PathVariable("userId") Integer userId);
	/*
	 * default ResponseEntity<Usersresponse> usersByUserIdDELETE(@ApiParam(value =
	 * "",required=true) @PathVariable("userId") Integer userId) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { } else {
	 * log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "UsersByUserId_GET", nickname = "usersByUserIdGET", notes = "Get a User by userId", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = User.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
    	produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<User> usersByUserIdGET(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId);
    
	/*
	 * default ResponseEntity<User> usersByUserIdGET(@ApiParam(value =
	 * "",required=true) @PathVariable("userId") Integer userId) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"primaryContact\" : \"primaryContact\",  \"middleName\" : \"middleName\",  \"emailId\" : \"emailId\",  \"userId\" : \"userId\"}"
	 * , User.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "UsersByUserId_PUT", nickname = "usersByUserIdPUT", notes = "Update a User by userId", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = User.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> usersByUserIdPUT(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);
    
	/*
	 * default ResponseEntity<User> usersByUserIdPUT(@ApiParam(value = ""
	 * ,required=true ) @Valid @RequestBody User body) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"primaryContact\" : \"primaryContact\",  \"middleName\" : \"middleName\",  \"emailId\" : \"emailId\",  \"userId\" : \"userId\"}"
	 * , User.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "Users_GET", nickname = "usersGET", notes = "Get a list of Users", response = User.class, responseContainer = "List", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = User.class, responseContainer = "List") })
    @RequestMapping(value = "/users", 
    		produces = { "application/json" },
        method = RequestMethod.GET)
    
    ResponseEntity<List<User>> usersGET(@ApiParam(value = "Get User based on emailId") @Valid @RequestParam(value = "email", required = false) String email,@ApiParam(value = "Get User based on firstName") @Valid @RequestParam(value = "firstName", required = false) String firstName,@ApiParam(value = "Get User based on primaryContact") @Valid @RequestParam(value = "primaryContact", required = false) String primaryContact);
    
	/*
	 * default ResponseEntity<List<User>> usersGET(@ApiParam(value =
	 * "Get User based on emailId") @Valid @RequestParam(value = "email", required =
	 * false) String email,@ApiParam(value =
	 * "Get User based on firstName") @Valid @RequestParam(value = "firstName",
	 * required = false) String firstName,@ApiParam(value =
	 * "Get User based on primaryContact") @Valid @RequestParam(value =
	 * "primaryContact", required = false) String primaryContact) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("[ {  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"primaryContact\" : \"primaryContact\",  \"middleName\" : \"middleName\",  \"emailId\" : \"emailId\",  \"userId\" : \"userId\"}, {  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"primaryContact\" : \"primaryContact\",  \"middleName\" : \"middleName\",  \"emailId\" : \"emailId\",  \"userId\" : \"userId\"} ]"
	 * , List.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "Users_POST", nickname = "usersPOST", notes = "Add a new User", response = Usersresponse.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Usersresponse.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Usersresponse> usersPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);
    
	/*
	 * default ResponseEntity<Usersresponse> usersPOST(@ApiParam(value = ""
	 * ,required=true ) @Valid @RequestBody User body) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"message\" : \"The User has been created successfully\"}",
	 * Usersresponse.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */

}
