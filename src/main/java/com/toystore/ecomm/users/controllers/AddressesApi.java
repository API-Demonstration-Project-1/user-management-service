/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toystore.ecomm.users.controllers;

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.toystore.ecomm.users.model.Address;
import com.toystore.ecomm.users.model.Addressesresponse;
import com.toystore.ecomm.users.model.Error;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.io.IOException;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-04T22:49:45.638Z")

@Api(value = "addresses", description = "the addresses API")
@RequestMapping(value = "")
public interface AddressesApi {

    @ApiOperation(value = "AddressesByAddressId_DELETE", nickname = "addressesByAddressIdDELETE", notes = "Delete a Address by addressId", tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Addressesresponse> addressesByAddressIdDELETE(@ApiParam(value = "",required=true) @PathVariable("addressId") Integer addressId);
    
	/*
	 * default ResponseEntity<Addressesresponse>
	 * addressesByAddressIdDELETE(@ApiParam(value =
	 * "",required=true) @PathVariable("addressId") Integer addressId) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { } else {
	 * log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default AddressesApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */

    @ApiOperation(value = "AddressesByAddressId_GET", nickname = "addressesByAddressIdGET", notes = "Get a Address by addressId", response = Address.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Address.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Address> addressesByAddressIdGET(@ApiParam(value = "",required=true) @PathVariable("addressId") Integer addressId);
    
	/*
	 * default ResponseEntity<Address> addressesByAddressIdGET(@ApiParam(value =
	 * "",required=true) @PathVariable("addressId") Integer addressId) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"country\" : \"country\",  \"addressType\" : \"addressType\",  \"district\" : \"district\",  \"state\" : \"state\",  \"line3\" : \"line3\",  \"userId\" : \"userId\",  \"line2\" : \"line2\",  \"line1\" : \"line1\",  \"addressId\" : \"addressId\"}"
	 * , Address.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default AddressesApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "AddressesByAddressId_PUT", nickname = "addressesByAddressIdPUT", notes = "Update a Address by addressId", response = Address.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Address.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/addresses/{addressId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Address> addressesByAddressIdPUT(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Address body);
    
	/*
	 * default ResponseEntity<Address> addressesByAddressIdPUT(@ApiParam(value = ""
	 * ,required=true ) @Valid @RequestBody Address body) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"country\" : \"country\",  \"addressType\" : \"addressType\",  \"district\" : \"district\",  \"state\" : \"state\",  \"line3\" : \"line3\",  \"userId\" : \"userId\",  \"line2\" : \"line2\",  \"line1\" : \"line1\",  \"addressId\" : \"addressId\"}"
	 * , Address.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default AddressesApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "Addresses_GET", nickname = "addressesGET", notes = "Get a list of Addresses", response = Address.class, responseContainer = "List", tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Address.class, responseContainer = "List") })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Address>> addressesGET(@ApiParam(value = "Get all Addresses for a given User") @Valid @RequestParam(value = "user", required = false) Integer user,@ApiParam(value = "Get specific type of Address (Billing or Shipping) for a given User. This works only if 'user' query parameter is also part of the URL.") @Valid @RequestParam(value = "addressType", required = false) String addressType);
    
	/*
	 * default ResponseEntity<List<Address>> addressesGET(@ApiParam(value =
	 * "Get all Addresses for a given User") @Valid @RequestParam(value = "user",
	 * required = false) Integer user,@ApiParam(value =
	 * "Get specific type of Address (Billing or Shipping) for a given User. This works only if 'user' query parameter is also part of the URL."
	 * ) @Valid @RequestParam(value = "addressType", required = false) String
	 * addressType) { if(getObjectMapper().isPresent() &&
	 * getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("[ {  \"country\" : \"country\",  \"addressType\" : \"addressType\",  \"district\" : \"district\",  \"state\" : \"state\",  \"line3\" : \"line3\",  \"userId\" : \"userId\",  \"line2\" : \"line2\",  \"line1\" : \"line1\",  \"addressId\" : \"addressId\"}, {  \"country\" : \"country\",  \"addressType\" : \"addressType\",  \"district\" : \"district\",  \"state\" : \"state\",  \"line3\" : \"line3\",  \"userId\" : \"userId\",  \"line2\" : \"line2\",  \"line1\" : \"line1\",  \"addressId\" : \"addressId\"} ]"
	 * , List.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default AddressesApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */


    @ApiOperation(value = "Addresses_POST", nickname = "addressesPOST", notes = "Add a new Address", response = Addressesresponse.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Addressesresponse.class) })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Addressesresponse> addressesPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Address body);
    
	/*
	 * default ResponseEntity<Addressesresponse> addressesPOST(@ApiParam(value = ""
	 * ,required=true ) @Valid @RequestBody Address body) {
	 * if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) { if
	 * (getAcceptHeader().get().contains("application/json")) { try { return new
	 * ResponseEntity<>(getObjectMapper().get().
	 * readValue("{  \"message\" : \"The Address has been created successfully\"}",
	 * Addressesresponse.class), HttpStatus.NOT_IMPLEMENTED); } catch (IOException
	 * e) {
	 * log.error("Couldn't serialize response for content type application/json",
	 * e); return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR); } } } else
	 * { log.
	 * warn("ObjectMapper or HttpServletRequest not configured in default AddressesApi interface so no example is generated"
	 * ); } return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED); }
	 */

}
